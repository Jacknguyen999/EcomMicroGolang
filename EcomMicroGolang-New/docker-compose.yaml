services:
  account:
    container_name: "account"
    image: "thomas/account:latest"
    build:
      context: .
      dockerfile: ./account/app.dockerfile
    depends_on:
      - account_db
    environment:
      DATABASE_URL: postgres://thomas:123456@account_db/thomas?sslmode=disable
    restart: on-failure

  product:
    container_name: "product"
    image: "thomas/product:latest"
    build:
      context: .
      dockerfile: ./product/app.dockerfile
    depends_on:
      - product_db
    environment:
      DATABASE_URL: http://product_db:9200
      BOOTSTRAP_SERVERS: kafka:9092
    restart: on-failure

  order:
    container_name: "order"
    image: "thomas/order:latest"
    build:
      context: .
      dockerfile: ./order/app.dockerfile
    depends_on:
      - order_db
    environment:
      DATABASE_URL: postgres://thomas:123456@order_db/thomas?sslmode=disable
      ACCOUNT_SERVICE_URL: account:8080
      PRODUCT_SERVICE_URL: product:8080
    restart: on-failure

  recommender-server:
    container_name: "recommender"
    image: "thomas/recommender:latest"
    build:
      context: .
      dockerfile: ./recommender/app.dockerfile
    command: python -c "from app.entry.main import serve; from app.services.recommender import recommender; print('Training recommender model...'); recommender.train(); print('Recommender model trained successfully!'); serve()"
    depends_on:
      - recommender_db
      - kafka
    environment:
      DATABASE_URL: postgresql://thomas:123456@recommender_db/thomas?sslmode=disable
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    restart: on-failure
    ports:
      - "50051:50051"

  recommender-sync:
    container_name: "recommender-sync"
    image: "thomas/recommender-sync:latest"
    build:
      context: .
      dockerfile: ./recommender/app.dockerfile
    command: python app/entry/sync.py
    depends_on:
      - recommender_db
      - kafka
    environment:
      DATABASE_URL: postgresql://thomas:123456@recommender_db/thomas?sslmode=disable
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    restart: on-failure

  graphql:
    container_name: "graphql"
    image: "thomas/graphql:latest"
    build:
      context: .
      dockerfile: ./graphql/app.dockerfile
    ports:
      - 8080:8080
    depends_on:
      - account
      - product
      - order
      - recommender-server
    environment:
      ACCOUNT_SERVICE_URL: account:8080
      PRODUCT_SERVICE_URL: product:8080
      ORDER_SERVICE_URL: order:8080
      RECOMMENDER_SERVICE_URL: recommender-server:50051
    restart: on-failure

  account_db:
    container_name: "account_db"
    image: postgres:14.0
    ports:
      - "5436:5432"
    environment:
      POSTGRES_DB: thomas
      POSTGRES_USER: thomas
      POSTGRES_PASSWORD: 123456
    volumes:
      - account_db_data:/var/lib/postgresql/data
    restart: unless-stopped

  product_db:
    container_name: "product_db"
    image: docker.elastic.co/elasticsearch/elasticsearch:6.2.4
    environment:
      ES_JAVA_OPTS: -Xms1g -Xmx1g
      discovery.type: single-node
      xpack.security.enabled: false
      http.cors.enabled: true
      http.cors.allow-origin: "*"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - product_db_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  order_db:
    container_name: "order_db"
    image: postgres:14.0
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: thomas
      POSTGRES_USER: thomas
      POSTGRES_PASSWORD: 123456
    volumes:
      - order_db_data:/var/lib/postgresql/data
    restart: unless-stopped

  recommender_db:
    container_name: "recommender_db"
    image: postgres:15
    ports:
      - "5434:5432"
    environment:
      POSTGRES_DB: thomas
      POSTGRES_USER: thomas
      POSTGRES_PASSWORD: 123456
    volumes:
      - recommender_db_data:/var/lib/postgresql/data
    restart: unless-stopped

  zookeeper:
    restart: always
    container_name: kafka-like-zookeeper
    image: docker.io/bitnami/zookeeper:3.8
    ports:
      - "2182:2181"
    volumes:
      - "zookeeper-volume:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    container_name: kafka
    hostname: kafka
    image: docker.io/bitnami/kafka:3.3
    depends_on:
      - zookeeper
    volumes:
      - "kafka-volume:/bitnami"
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "kafka-topics.sh --bootstrap-server localhost:9092 --list",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  account_db_data:
  product_db_data:
  order_db_data:
  recommender_db_data:
  kafka-volume:
  zookeeper-volume:
